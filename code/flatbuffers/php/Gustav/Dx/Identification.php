<?php
// automatically generated by the FlatBuffers compiler, do not modify

namespace Gustav\Dx;

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// ユーザ登録(Input/Output)
class Identification extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return Identification
     */
    public static function getRootAsIdentification(ByteBuffer $bb)
    {
        $obj = new Identification();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return Identification
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /**
     * @return int
     */
    public function getUserId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    public function getOpenId()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    public function getNote()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    public function getPrivateKey()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    public function getPublicKey()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startIdentification(FlatBufferBuilder $builder)
    {
        $builder->StartObject(5);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return Identification
     */
    public static function createIdentification(FlatBufferBuilder $builder, $user_id, $open_id, $note, $private_key, $public_key)
    {
        $builder->startObject(5);
        self::addUserId($builder, $user_id);
        self::addOpenId($builder, $open_id);
        self::addNote($builder, $note);
        self::addPrivateKey($builder, $private_key);
        self::addPublicKey($builder, $public_key);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addUserId(FlatBufferBuilder $builder, $userId)
    {
        $builder->addIntX(0, $userId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOpenId(FlatBufferBuilder $builder, $openId)
    {
        $builder->addOffsetX(1, $openId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNote(FlatBufferBuilder $builder, $note)
    {
        $builder->addOffsetX(2, $note, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPrivateKey(FlatBufferBuilder $builder, $privateKey)
    {
        $builder->addOffsetX(3, $privateKey, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPublicKey(FlatBufferBuilder $builder, $publicKey)
    {
        $builder->addOffsetX(4, $publicKey, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endIdentification(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishIdentificationBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset);
    }
}
