<?php
// automatically generated by the FlatBuffers compiler, do not modify

namespace Gustav\Common\Model\FlatBuffers;

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

class DataChunk extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return DataChunk
     */
    public static function getRootAsDataChunk(ByteBuffer $bb)
    {
        $obj = new DataChunk();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return DataChunk
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    public function getChunkId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @return byte
     */
    public function getVersion()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getByte($o + $this->bb_pos) : 0;
    }

    public function getRequestId()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param int offset
     * @return byte
     */
    public function getContent($j)
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getByte($this->__vector($o) + $j * 1) : 0;
    }

    /**
     * @return int
     */
    public function getContentLength()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @return string
     */
    public function getContentBytes()
    {
        return $this->__vector_as_bytes(10);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startDataChunk(FlatBufferBuilder $builder)
    {
        $builder->StartObject(4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return DataChunk
     */
    public static function createDataChunk(FlatBufferBuilder $builder, $chunkId, $version, $requestId, $content)
    {
        $builder->startObject(4);
        self::addChunkId($builder, $chunkId);
        self::addVersion($builder, $version);
        self::addRequestId($builder, $requestId);
        self::addContent($builder, $content);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addChunkId(FlatBufferBuilder $builder, $chunkId)
    {
        $builder->addOffsetX(0, $chunkId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param byte
     * @return void
     */
    public static function addVersion(FlatBufferBuilder $builder, $version)
    {
        $builder->addByteX(1, $version, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRequestId(FlatBufferBuilder $builder, $requestId)
    {
        $builder->addOffsetX(2, $requestId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addContent(FlatBufferBuilder $builder, $content)
    {
        $builder->addOffsetX(3, $content, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createContentVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(1, count($data), 1);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putByte($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startContentVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(1, $numElems, 1);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endDataChunk(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
